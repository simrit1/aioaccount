name: Production workflow

on:
  push:
    branches:
    - Production

jobs:
  base-production:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.3.2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude .git,__pycache__,docs/source/conf.py,old,build,dist
          # exit-zero treats all errors as warnings
          flake8 . --count --max-line-length=80 --statistics --exclude .git,__pycache__,docs/source/conf.py,old,build,dist
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install pyright
        run: npm install pyright -g
      - name: Run pyright
        run: pyright aioaccount/*
      - name: MySQL server
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql database: ${{ secrets.DATABASE_DB }}
          mysql user: ${{ secrets.DATABASE_USER }}
          mysql password: ${{ secrets.DATABASE_PASS }}
          host port: 3800
          container port: 3800
      - name: Wait for MySQL to startup
        run: sleep 15
      - name: Dummy SMTP server
        uses: upgundecha/start-sendria-github-action@v1.0.0
        with:
          smtp-port: 1025
      - name: MongoDB server
        uses: supercharge/mongodb-github-action@1.6.0
        with:
          mongodb-version: '4.4'
      - name: Run unit tests
        run: python run_tests.py --smtp_hostname localhost --smtp_port 1025 --smtp_email test@example.com --mongo_server localhost --mongo_port 27017 --sql_username ${{ secrets.DATABASE_USER }} --sql_password ${{ secrets.DATABASE_PASS }} --sql_server 127.0.0.1 --sql_port 3800 --sql_database ${{ secrets.DATABASE_DB }}
      - name: Pack to pypi
        env:
          PYPI_USER: ${{ secrets.PYPI_USER }}
          PYPI_PASS: ${{ secrets.PYPI_PASS }}
        run: |
          python -m pip install --upgrade build
          python -m pip install --user --upgrade twine
          python -m build
          python -m twine upload --username $PYPI_USER --password $PYPI_PASS --repository pypi dist/*
